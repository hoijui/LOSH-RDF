@prefix : <https://www.thingiverse.com/thing%3A11616/1.0.0/> .
@prefix okh: <https://github.com/OPEN-NEXT/OKH-LOSH/raw/master/OKH-LOSH.ttl#> .
@prefix otrl: <http://purl.org/oseg/ontologies/OTRL#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

:Project a okh:Module ;
    rdfs:label "Texture Mapping in OpenScad!" ;
    okh:dataSource "thingiverse.com" ;
    okh:documentationLanguage "en" ;
    okh:documentationReadinessLevel otrl:Odrl3 ;
    okh:function """Recently on the OpenScad discussion alias, I was trying to explain how I could do my own lighting calculations if given half a chance.  Altough it's not really a possibility for the current OpenScad renderer, I got to thinking.  Even though I can't print in multiple colors (yet), I can certainly liven up my OpenScad renderings a bit.\r
\r
This thing is a set of imaging routines for OpenScad.\r
\r
The general principle is fairly straight forward.  First you need an image to be converted to a format that OpenScad can understand.  In the included .zip file, there is such an executable.  Just run:\r
    ImageConverter.exe imagename > name.scad\r
\r
This will generate something that looks like:\r
imagename_triplets_array = [0,0,0, 1,2,3, 255,255,255];\r
imagename = image(width, height, imagename_triplets_array)\r
\r
There is a new function here: image() which takes parameters necessary to just package up some stuff for later usage in functions.\r
\r
The crux of the routines is actually: image_getpixel(img, x,y)\r
\r
This will return a color value at that point in the image.  Nice and handy.\r
\r
But, when you're using images of varying sizes, you don't use pixel coordinates directly, you use normalized values (between 0..1)\r
\r
So, there is another routine: image_gettexel(image, u, v)\r
\r
In this case, the 'u' and 'v' values range from 0..1\r
\r
That's handy when you're displaying on a bezier surface for example, or a sphere, or anything else that's parametrically defined.  You just need to supply the parametric values, and when you go to draw a particular facet, change the color for that facet, and voila!!  You've got texture mapping.\r
\r
Just for kicks, there is a luminance() function.  What good is that?  Well, that allows you to turn an rgb value into a single grayscale value.  If you can do that, then you can't be that far away from having a height map generated out of an image.\r
\r
Put it all together and you can take a picture of yourself, convert to OpenScad form, generate a height map, create a mesh that matches the height field (need to do some work for that one), and print out a 3D relief of your face!!  Poor man's scan/print if you will.\r
\r
At any rate, it's not complete, and you'll find that you use images of any significant size, your machine will crawl for literally hours.\r
\r
But, if you go back and look at the various font libraries, where you're typically generating 'images' that are 16x12 or something small like that, then suddenly life becomes way easy.\r
\r
If I were into actually contributing to the codebase of OpenScad, rather than just commenting on it, I would suggest that making the array lookups really fast to enable stuff like this without making the machine crawl, would be a very good investment.\r
\r
UPDATE: 21092011\r
Added blog entry: http://williamaadams.wordpress.com/2011/09/21/openscad-texture-mapping/""" ;
    okh:hasImage :Image ;
    okh:licensor "WilliamAAdams" ;
    okh:repo <https://www.thingiverse.com/thing:11616> ;
    okh:repoHost "www.thingiverse.com" ;
    okh:spdxLicense <https://spdx.org/licenses/CC-BY-4.0> ;
    okh:technologyReadinessLevel otrl:Otrl4 ;
    okh:uploadMethod "auto" ;
    okh:version "1.0.0" ;
    okh:versionOf <https://www.thingiverse.com/thing:11616> .

:Image a okh:Image ;
    rdfs:label "Image of Texture Mapping in OpenScad! 1.0.0" ;
    okh:fileFormat "JPG" ;
    okh:fileUrl <https://cdn.thingiverse.com/renders/e6/f0/07/b8/4b/Imaging1_display_large_display_large.jpg> ;
    okh:permaURL <https://cdn.thingiverse.com/renders/e6/f0/07/b8/4b/Imaging1_display_large_display_large.jpg> .

