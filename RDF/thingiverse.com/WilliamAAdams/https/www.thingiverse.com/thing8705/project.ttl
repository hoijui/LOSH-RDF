@prefix : <https://www.thingiverse.com/thing%3A8705/1.0.0/> .
@prefix okh: <https://github.com/OPEN-NEXT/OKH-LOSH/raw/master/OKH-LOSH.ttl#> .
@prefix otrl: <http://purl.org/oseg/ontologies/OTRL#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

:Project a okh:Module ;
    rdfs:label "Bezier Mesh Surface V0.7" ;
    okh:dataSource "thingiverse.com" ;
    okh:documentationLanguage "en" ;
    okh:documentationReadinessLevel otrl:Odrl3 ;
    okh:function """The best thing about development tools is they usually get better as you discover what's really useful to you.  In the last iteration of this stuff, a 'debugger' showed up, which allowed you to visualize the Bezier mesh.  That thing was a good step forward, but very rudimentary, still relying on 'granules' of a sort to do the drawing.\r
\r
This thing makes the drawing process a bazillion (officially measured scale) times faster.  I finally pulled enough graphics books off the shelf to figure out my vector rotation problem.  It's much easier if you think in terms of polar coordinates. (shy grin)\r
\r
At any rate, the primary changes are in the maths, bezier, and test_maths files, so those are uploaded here.  \r
\r
Now the drawing of wireframes comes from placing cylinders in the positions of lines.  The benefit here is that you can dial in both the radius, and the number of faces, to reduce the amount of drawing time. A bonus benefit is that if you make the lines thick enough, and use enough of them, you might actually be able to print a surface directly from the wireframe.\r
\r
On the other hand, what this also does is make things fast enough that you can actually rapidly visualize how your bezier is turning out.  You can see both the control points, and the wireframe of the map in short order, and easily rotate and move it around.  \r
\r
I tell you, this is pretty exciting even for me.\r
\r
With figuring out the math for the cylinder placement, I have a new lease on life, and have figured out the placement for the quad patches as well.  So, I'd say one more experimental session away from actually producing the surfaces.\r
\r
Final note.  If you want to play around with the line drawing, it's in the test_bezier.scad file.  It's the 'PlaceLine()' module.  There is also a nifty little thing called a segment parser.  It takes the endpoints for a line, and returns an 'array' which is essentially a data structure, containing, origin, rotations, length.  That's all you need for the line placer to do its thing.\r
\r
phew...""" ;
    okh:hasImage :Image ;
    okh:licensor "WilliamAAdams" ;
    okh:repo <https://www.thingiverse.com/thing:8705> ;
    okh:repoHost "www.thingiverse.com" ;
    okh:spdxLicense <https://spdx.org/licenses/CC-BY-4.0> ;
    okh:technologyReadinessLevel otrl:Otrl4 ;
    okh:uploadMethod "auto" ;
    okh:version "1.0.0" ;
    okh:versionOf <https://www.thingiverse.com/thing:8705> .

:Image a okh:Image ;
    rdfs:label "Image of Bezier Mesh Surface V0.7 1.0.0" ;
    okh:fileFormat "JPG" ;
    okh:fileUrl <https://cdn.thingiverse.com/renders/37/95/a2/c5/1e/Bezier_Wireframe2_display_large_display_large.jpg> ;
    okh:permaURL <https://cdn.thingiverse.com/renders/37/95/a2/c5/1e/Bezier_Wireframe2_display_large_display_large.jpg> .

